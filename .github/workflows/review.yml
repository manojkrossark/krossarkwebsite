name: Google Gemini Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  gemini_review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get changed files diff
      id: diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.ref }} | head -c 65536)
        
        # If there's no real diff, simulate one (for testing or fallback)
        if [ -z "$DIFF" ]; then
          DIFF="diff --git a/app.py b/app.py\n@@ def greet():\n-    print('Hello')\n+    print('Hi!')"
        fi

        DIFF_ESCAPED=$(printf '%s' "$DIFF" | jq -Rs .)
        echo "diff=$DIFF_ESCAPED" >> $GITHUB_OUTPUT

        - name: Call Google Gemini API for review
        id: gemini
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "Requesting Google Gemini code review..."
  
          # Escape and format the DIFF content safely
          DIFF_CONTENT=${{ steps.diff.outputs.diff }}
          PROMPT=$(printf 'You are a helpful code reviewer. Review the following git diff and provide constructive feedback:\n\n%s' "$DIFF_CONTENT" | jq -Rs .)
  
          PAYLOAD=$(jq -n \
            --argjson prompt $PROMPT \
            '{
              contents: [{
                role: "user",
                parts: [{
                  text: $prompt
                }]
              }],
              generationConfig: {
                temperature: 0.2,
                topP: 0.95,
                topK: 40,
                maxOutputTokens: 1024
              }
            }')
  
          ENDPOINT="https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent"
  
          RESPONSE=$(curl -s -X POST "$ENDPOINT?key=$GOOGLE_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
  
          echo "Raw Gemini API response:"
          echo "$RESPONSE"
  
          REVIEW=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "⚠️ No response from Gemini AI."')
          echo "review=$REVIEW" >> $GITHUB_OUTPUT


    - name: Post review comment on PR
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.PAT }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### 🤖 Google Gemini AI Code Review
          ${{ steps.gemini.outputs.review }}
